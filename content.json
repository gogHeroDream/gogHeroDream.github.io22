[{"title":"","date":"2018-07-20T09:55:44.027Z","path":"2018/07/20/markdown语法/","text":"参考网址：http://wowubuntu.com/markdown/1、标题Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。①atx 形式 #与文字中间要有空格 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题②Setext 形式 用底线的形式，任何数量的 = 和 - 都可以有效果。2、图片！提示的文字3、链接（两种）①内联： 显示的文字；②引用方式： 4、换行两个以上的空格然后回车5、代码引用如果引用的语句只有一段，不分行，可以用 将语句包起来。如code; 如果引用的语句为多行，可以将``置于这段代码的首行和末行。或者四个空格或一个制表符6、列表 7、引用 和文本之间要保留一个字符的空格。8、分割线可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。9、字体属性通过闭合标签font，属性face为字体类型，color为字体颜色，size为字体大小 我是华文彩云color=graycolor=#0099ff size=5 face=”黑体”","tags":[]},{"title":"Hello World","date":"2018-07-20T08:20:25.367Z","path":"2018/07/20/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"JS距离相关的属性","date":"2018-04-03T09:03:38.000Z","path":"2018/04/03/180403js距离相关/","text":"理解不够，先上张图来凑js中获取各种宽度和距离，常常让我们混淆，各种浏览器的不兼容让我们很头疼，现在就在说说js中有哪些宽度和距离。 名词解释 screen：屏幕。这一类取到的是关于屏幕的宽度和距离，与浏览器无关，应该是获取window对象的属性。client：使用区、客户区。指的是客户区，当然是指浏览器区域。offset：偏移。指的是目标甲相对目标乙的距离。scroll：卷轴、卷动。指的是包含滚动条的的属性。inner：内部。指的是内部部分，不含滚动条。avail：可用的。可用区域，不含滚动条，易与inner混淆。 window1.window.innerWidth/innerHeight描述：浏览器可见区域的内宽度、高度（不含浏览器的边框，但包含滚动条）。兼容：ie9/10、chrome、firefox。示例（缩放浏览器的宽度为1000px，高度为500px）： alert(window.innerWidth);// chrome/firefox/ie9/10=&gt;1000// ie6/7/8=&gt;undefinedalert(window.innerHeight);// chrome/firefox/ie9/10=&gt;500// ie6/7/8=&gt;undefined 2.window.outerWidth/outerHeight描述：浏览器外宽度（包含浏览器的边框，因各个浏览器的边框边一样，得到的值也是不一样的）。兼容：ie9/10、chrome、firefox。示例（缩放浏览器的宽度为1000px，高度为500px）： alert(window.outerWidth);// chrome/firefox/ie9/10=&gt;1002// ie6/7/8=&gt;undefinedalert(window.outerHeight);// chrome/firefox/ie9/10=&gt;502// ie6/7/8=&gt;undefined 注意：没有window.width属性。 3.window.screenLeft/screenTop描述：浏览器的位移，表示：ie浏览器的内边缘距离屏幕边缘的距离。chrome浏览器的外边缘距离屏幕边缘的距离。如图：兼容：ie6/7/8/9/10、chrome。示例： alert(window.screenLeft);// ie=&gt;87// chrome=&gt;86// firefox=&gt;undefinedalert(window.screenTop);// ie=&gt;87// chrome=&gt;86// firefox=&gt;undefined 4.window.screenX/screenY描述：浏览器的位移，表示：ie9/10浏览器的外边缘距离屏幕边缘的距离。chrome浏览器的外边缘距离屏幕边缘的距离。由此可知，chrome的screenLeft和screenX是相等的（其目的是为了兼容ie和firefox，两个属性都兼备了，但更趋向于firefox，chrome的这种做法不止这一处，还有很多，其实这种做法便于开发者移植，但对开发者的开发过程产生了一定的混淆），ie9/10的screenLeft是大于screenX的.兼容：ie9/10、chrome、firefox。示例： alert(window.screenX);// chrome/firefox=&gt;86// ie9/10=&gt;79// ie6/7/8=&gt;undefined alert(window.screenY);// chrome/firefox=&gt;86// ie9/10=&gt;79// ie6/7/8=&gt;undefined 5.window.pageXOffset/pageYOffset描述：表示浏览器X轴（水平）、Y轴（垂直）滚动条的偏移距离。兼容：ie9/10、chrome、firefox。示例： document.onclick=function(){ alert(window.pageXOffset); // chrome=&gt;200 // firefox=&gt;200 // ie9/10=&gt;200 // ie6/7/8=&gt;undefined alert(window.pageYOffset); // chrome=&gt;200 // firefox=&gt;200 // ie9/10=&gt;200 // ie6/7/8=&gt;undefined}; 6.window.scrollX/scrollY描述：表示浏览器X轴（水平）、Y轴（垂直）滚动条的偏移距离。由此可知，在chrome和firefox中window.pageXOffset和window.scrollX是相等的，具体为什么会出现两个相等的属性值，不得而知。兼容：chrome、firefox。示例： document.onclick=function(){ alert(window.scrollX); // chrome=&gt;200 // firefox=&gt;200 // ie6/7/8/9/10=&gt;undefined alert(window.scrollY); // chrome=&gt;200 // firefox=&gt;200 // ie6/7/8/9/10=&gt;undefined}; screen1.screen.width/height描述：屏幕的宽度、高度（指的是屏幕的分辨率，单位为像素）。兼容性：ie6/7/8/9/10、chrome、firefox。示例（屏幕的分辨率为1440×900）： alert(screen.width);// chrome/firefox/ie6/7/8/9/10=&gt;1440alert(screen.height);// chrome/firefox/ie6/7/8/9/10=&gt;900 注意：此处必须是screen.width，而不是screenWidth，与接下来要说的各种宽度有所区别。 2.screen.availWidth/availHeight描述：屏幕的可用宽度、高度（通常与屏幕的宽度、高度一致）。兼容性：ie6/7/8/9/10、chrome、firefox。示例： alert(screen.availWidth);// chrome/firefox/ie6/7/8/9/10=&gt;1440alert(screen.availHeight);// chrome/firefox/ie6/7/8/9/10=&gt;900 element元素的宽度、位移、距离以元素的盒模型为content-box为例。即： box-sizing: content-box;其他盒模型计算会有差异，请勿对号入座。 1.elment.clientWidth/clientHeight描述：计算如下， 有滚动条时：clientWidth=元素左内边距宽度+元素宽度+元素右内边距宽度-元素垂直滚动条宽度无滚动条时：clientWidth=元素左内边距宽度+元素宽度+元素右内边距宽度 使用该特性可以计算出的滚动条宽度（即设置元素的内容宽度超过元素宽度，然后分别设置是否超过隐藏，两次的clientWidth差值就是滚动条的宽度）。兼容：chrome、firefox、ie6/7/8/9/10。示例（宽度和高度都为100px，边框为50px，内边距为60px，外边距为70px，左、上位移为80px，滚动条的宽度因系统不同而不同）： // 有滚动条=&gt;paddingLeftWidth+width+paddingRightWidth-scrollYWidth// 无滚动条=&gt;paddingLeftWidth+width+paddingRightWidthalert(oDemo.clientWidth);// 有滚动条=&gt;60+100+60-17=203// 无滚动条=&gt;60+100+60=220// 有滚动条=&gt;paddingTopWidth+height+paddingBottomWidth-scrollYHeight// 无滚动条=&gt;paddingTopWidth+height+paddingBottomWidthalert(oDemo.clientHeight);// 有滚动条=&gt;60+100+60-17=203// 无滚动条=&gt;60+100+60=220 2.element.clientLeft/clientTop描述：clientLeft为左边框宽度，clientTop为上边框宽度。兼容：chrome、firefox、ie6/7/8/9/10。示例（宽度和高度都为100px，边框为50px，内边距为60px，外边距为70px，左、上位移为80px，滚动条的宽度因系统不同而不同）： // borderLeftWidthalert(oDemo.clientLeft);// =&gt;50 // borderTopWidthalert(oDemo.clientTop);// =&gt;50 3.element.offsetWidth/offsetHeight描述：offsetWidth=元素左边框宽度+元素左内边距宽度+元素宽度+元素右内边距宽度+元素右边框宽度。兼容：chrome、firefox、ie6/7/8/9/10。示例（宽度和高度都为100px，边框为50px，内边距为60px，外边距为70px，左、上位移为80px，滚动条的宽度因系统不同而不同）： // borderLeftWidth+paddingLeftWidth+width+paddingRightWidth+borderRightWidthalert(oDemo.offsetWidth);// =&gt;50+60+100+60+50=320 // borderTopWidth+paddingLeftWidth+width+paddingRightWidth+borderRightWidthalert(oDemo.offsetWidth);// =&gt;50+60+100+60+50=320 4.element.offsetLeft/offsetTop描述：表示该元素相对于最近的定位祖先元素的距离，chrome：offsetLeft=定位祖先左边框宽度+定位祖先元素左内边距宽度+左位移+左外边距宽度ie6/7/8/9/10、firefox：offsetLeft=定位祖先元素左内边距宽度+左位移+左外边距宽度。chrome比其他浏览器多计算了定位祖先元素的边框。offsetTop同理。兼容：chrome、firefox、ie6/7/8/9/10。示例（宽度和高度都为100px，边框为50px，内边距为60px，外边距为70px，左、上位移为80px，滚动条的宽度因系统不同而不同）： // 以最近的定位祖先元素为准// 谷歌=&gt;parentBorderLeftWidth+parentPaddingLeftWidth+left+marginLeft// 其他=&gt;parentPaddingLeftWidth+left+marginLeftalert(oDemo.offsetLeft);// chrome=&gt;20+10+80+70=180// ie6/7/8/9/10/firefox=&gt;160 // 以最近的定位祖先元素为准// 谷歌=&gt;parentBorderTopWidth+parentPaddingTopWidth+left+marginLeft// 其他=&gt;parentBorderTopWidth+left+marginLeftalert(oDemo.offsetLeft);// chrome=&gt;20+10+80+70=180// ie6/7/8/9/10/firefox=&gt;160 5.element.scrollWidth/scrollHeight描述：计算方法如，有滚动条时： chrome、firefox、ie8/9/10：左内边距宽度+内容宽度。ie6/7：左内边距宽度+内容宽度+右内边距宽度（是由CSS的BUG引起）。无滚动条时：左内边距宽度+宽度+右内边距宽度。 兼容：chrome、firefox、ie8/9/10、ie6/7（半兼容）。示例（宽度和高度都为100px，边框为50px，内边距为60px，外边距为70px，左、上位移为80px，滚动条的宽度因系统不同而不同，内容宽度和高度都为200px）： // 有滚动条=paddingLeftWidth+contentWidth// 有滚动条(ie6/7)=paddingLeftWidth+contentWidth+paddingRightWidth// 无滚动条=paddingLeftWidth+width+paddingRightWidthalert(oDemo.scrollWidth);// 有滚动条=&gt;200+60=260// 有滚动条(ie6/7)=&gt;200+60+60=320// 无滚动条=&gt;100+60+60=220 // 有滚动条=paddingTopWidth+contentWidth// 有滚动条(ie6/7)=paddingTopWidth+contentWidth+paddingBottomWidth// 无滚动条=paddingTopWidth+width+paddingBottomWidthalert(oDemo.scrollHeight);// 有滚动条=&gt;60+200=260// 有滚动条(ie6/7)=&gt;60+200+60=320// 无滚动条=&gt;60+100+60=220 6.element.scrollLeft/scrollTop描述：获得水平、垂直滚动条的距离。兼容：chrome、firefox、ie6/7/8/9/10。示例（宽度和高度都为100px，边框为50px，内边距为60px，外边距为70px，左、上位移为80px，滚动条的宽度因系统不同而不同）： document.onclick=function(){ // 水平滚动条左距离 alert(oDemo.scrollLeft); // 垂直滚动条上距离 alert(oDemo.scrollTop);} 总结因为document.documentElement就是浏览器的html标签，所以获取浏览器的相关属性，也可以用该对象来获取。屏幕宽度：window.screen.width。浏览器内宽度：window.innerWidth || document.documentElement.clientWidth。元素内容宽度：element.clientWidth。元素占位宽度：element.offsetWidth。元素相对位置：无。原文来自:http://caibaojian.com/js-name.html","tags":[{"name":"JS基础语法","slug":"JS基础语法","permalink":"http://yoursite.com/tags/JS基础语法/"}]},{"title":"markdown语法","date":"2018-03-24T17:31:38.000Z","path":"2018/03/25/180325markdown/","text":"写在前面Markdown 的目标是实现「易读易写.参考地址转自 可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。 总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像强调。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。 兼容 HTMLMarkdown 语法的目标是：成为一种适用于网络的书写语言。 Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。 不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。 要制约的只有一些 HTML 区块元素――比如 &lt;div>、&lt;table>、&lt;pre>、&lt;p> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 &lt;p> 标签。 例子如下，在 Markdown 文件里加上一段 HTML 表格：","tags":[{"name":"语法","slug":"语法","permalink":"http://yoursite.com/tags/语法/"}]},{"title":"建站日志","date":"2018-03-24T09:31:38.000Z","path":"2018/03/24/180324建站日志/","text":"写在前面本站于2018年3月20日创建，故在此mark，站点是本人用来及记录一些开发技巧与自我提升的一个记录依据，写的不好的地方希望各位路过的大神来补充一下。在此感谢！！！ 建站目的本站是利用hexo+github来搭建的个人博客站，从零开始建站，自身学会了一些技巧，对于自身来说是一件很有意义的事，在这里就分享下我的建站心得吧。 建站方式 首先你要是想拥有自己的站点有三种方式，如果只是写写博客推荐第3条而且免费， 1.申请域名、服务器（这个是真正属于自己的站点，想丢啥丢啥，不过别违法哦）；2.挂载到公司测试服务器上，（极度不推荐，可维护性差，代码说没就没了）；3.挂载到github上（极其推荐，免费、实用）。 使用第三种方式，快速建站又分为两种方式本站是第一种 1.hexo+github;2.Jekyll+github; 建站历程1.先申请账号要拥有自己的站点得先拥有自己的代码仓库，不然没有代码存放的地方怎么能拿出来看呢？账号可以去官网申请github官网 github_step1 按顺序都填完，邮箱认证完，点击右上角的新建一个仓库，新建一个仓库已自己仓库名.github.io来为这个仓库命名 github_step1 2.安装node环境依赖，去node官网下载稳定版; github_step1 3.安装hexo和hexocli打开命令行输入 npm i hexo -gnpm i hexocli -g 输入 hexo -v 有版本号返回说明安装成功 4.建立基站找一个存放hexo代码的blog文件夹在该目录下输入 hexo init 初始化该文件夹； 5.尝试新建一个日志在命令行下 hexo new post “1web log”新建一个md文档在我的 电脑的目录下 F:\\hexo\\source\\ _posts 将会看到 “1web log.md” 文件,在该md文档里就可以写自己的博客啦！！！ write_blog 6.下载主题在github克隆别人的模板可以在Hexo Themes上面寻找合适的模板，然后克隆下来，并将这个模板文件放到thems文件夹下，将修改_config里面的文件来去配置，然后一些资源文件里面的配置根据自身需要去调整，详细配置详见hexo官方文档。 deploy_step 7.调试开发准备工作都做完了，就可以开启服务去调试啦！！！ hexo g #生成静态页面至public目录hexo s #开启预览访问端口 8.推送代码站点都配置完了，命令行状态下输入 npm install hexo-deployer-git –save 安装插件，(别忘了配置_config里面的deploy)然后编辑好文章 在命令行下输入 hexo d -g 将代码上传到github。 设置关联域名如果想逼格高一点，还可以设置IP去万网申请一个IP地址，很便宜几块钱,如下设置一下，实在不懂请点击新手引导，然后在github对应仓库中（就是*github.io文件）进入【Settings】标签页,在【Custom domain】功能中,将刚刚申请的域名写进去save就OK啦，最后在hexo仓库下新建一个CNAME文件，并将申请的域名填进去保存。 IP IP2 一些常用命令 hexo clean &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#删除public文件夹等一些生产目录下的文件hexo new “postName” &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#新建文章hexo new page “pageName” &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#新建页面hexo generate &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#生成静态页面至public目录hexo server &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#将.deploy目录部署到GitHubhexo help &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#查看帮助hexo version &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#查看Hexo的版本 一些网站或文章标题等配置参数 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 author 作者名 language 网站语言 timezone 网站使用的时区 url 网站url root 网站根目录","tags":[{"name":"建站心得","slug":"建站心得","permalink":"http://yoursite.com/tags/建站心得/"},{"name":"经验","slug":"经验","permalink":"http://yoursite.com/tags/经验/"}]},{"title":"第一篇博客","date":"2018-03-24T09:31:38.000Z","path":"2018/03/24/第一篇博客/","text":"第一篇标题些什么好呢标题些什么好呢1标题些什么好呢2标题些什么好呢13标题些什么好呢4应该说些什么复制一段话把，遇见你，是我一世的春暖花开岁月向前，生命不止心随烟火，雨落成花既往不恋，当下不杂，未来不惧岁月向前，生命不止心随烟火，雨落成花既往不恋，当下不杂，未来不惧","tags":[{"name":"Foo","slug":"Foo","permalink":"http://yoursite.com/tags/Foo/"},{"name":"Bar","slug":"Bar","permalink":"http://yoursite.com/tags/Bar/"},{"name":"Baz","slug":"Baz","permalink":"http://yoursite.com/tags/Baz/"}]}]